# VPC/EC2 template
# Peadar Grant

Parameters:

  LatestLinuxImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  LatestWindowsImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-windows-latest/Windows_Server-2022-English-Full-Base

Resources:

  Vpc:
    Type: AWS::EC2::VPC # Type names are case-sensitive   
    Properties: # look up in AWS reference docs!
      CidrBlock: 10.0.0.0/16
      Tags:
      - Key: Name # name appears in the Web console
        Value: LAB_VPC
    # order of Type and Properties doesn't matter
    # but best to keep Type first
  
  Subnet:
    Type: AWS::EC2::Subnet    
    Properties:
      AvailabilityZone: eu-west-1a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: LAB_SN
      VpcId: !Ref Vpc # use !Ref to get VpcId for Vpc logical name
        
  InternetGateway:
    Type: AWS::EC2::InternetGateway    
    Properties:
      Tags:
      - Key: Name
        Value: LAB_IGW

  # In the web console and using CLI/Python we attach a gateway to Vpc
  # Cloudformation instead handles it by creating another resource
  # that represents the attachment.
  # Just like the attach-internet-gateway command it needs the Id of the
  # Vpc and InternetGateway which we can get using !Ref
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment    
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
    

  # When we create a Vpc (by any method) it comes with a default route
  # table.  Problem is, there is no way to refer to it from within
  # CloudFormation.  Instead we make a new Route table. 
  RouteTable:
    Type: AWS::EC2::RouteTable    
    Properties:
      Tags:
      - Key: Name
        Value: public_routes
      VpcId: !Ref Vpc

  # A Route (inside our new Route table) is just another Resource to
  # CloudFormation. 
  Route:
    Type: AWS::EC2::Route
    # Normally CloudFormation handles dependency management for you.
    # Here we need to add the DependsOn attribute to wait until the
    # InternetGateway exists BEFORE creating the route. 
    DependsOn: InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  # Our newly created RouteTable needs to be associated with our Subnet
  # for it to take effect.
  # In CloudFormation this is by means of a resource. 
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation    
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet

  # Security Group w/ Multiple Ingress Rules
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: allow connections from specified source security group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 3389
        ToPort: 3389
        CidrIp: 0.0.0.0/0


  # Instance
  Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      SubnetId: !Ref Subnet
      ImageId: !Ref LatestLinuxImageId
      SecurityGroupIds:
      - !Ref SecurityGroup
      KeyName: LAB_KEY # generally keys will be already existing
      Tags:
      - Key: Name
        Value: LINUX_INSTANCE
      
  WindowsInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      SubnetId: !Ref Subnet
      ImageId: !Ref LatestWindowsImageId
      SecurityGroupIds:
      - !Ref SecurityGroup
      KeyName: LAB_KEY # generally keys will be already existing
      Tags:
      - Key: Name
        Value: WINDOWS_INSTANCE
        
Outputs:

  VpcId:
    Description: Vpc Id
    Value: !Ref Vpc

  SubnetId:
    Description: Subnet Id
    Value: !Ref Subnet

  InstanceId:
    Description: Instance Id
    Value: !Ref Instance

  PublicIp:
    Value: !GetAtt Instance.PublicIp
    # we use !GetAtt to show available output about a resource
    # all !GetAtt possibilities are in the documentation
    Description: Instance Public Ip
    
  WindowsPublicIp:
    Value: !GetAtt WindowsInstance.PublicIp
    # we use !GetAtt to show available output about a resource
    # all !GetAtt possibilities are in the documentation
    Description: Instance Public Ip